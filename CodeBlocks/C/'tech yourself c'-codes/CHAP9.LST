listing 1
FILE *fp;

if((fp = fopen("myfile", "r")) == NULL) {
  printf("Error opening file.\n");
  exit(1); /* or substitute your own error handler */
}

listing 2
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  char str[80] = "This is a file system test.\n";
  FILE *fp;
  char *p;
  int i;

  /* open myfile for output */
  if((fp = fopen("myfile", "w"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* write str to disk */
  p = str;
  while(*p) {
    if(fputc(*p, fp)==EOF) {
      printf("Error writing file.\n");
      exit(1);
    }
    p++;
  }
  fclose(fp);

  /* open myfile for input */
  if((fp = fopen("myfile", "r"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* read back the file */
  for(;;) {
     i = fgetc(fp);
     if(i == EOF) break;
     putchar(i);
  }
  fclose(fp);

  return 0;
}

listing 3
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  char str[80] = "This is a file system test.\n";
  FILE *fp;
  char ch, *p;

  /* open myfile for output */
  if((fp =  fopen("myfile", "w"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* write str to disk */
  p = str;
  while(*p) {
    if(fputc(*p, fp)==EOF) {
      printf("Error writing file.\n");
      exit(1);
    }
    p++ ;
  }
  fclose(fp);

  /* open myfile for input */
  if((fp = fopen("myfile", "r"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* read back the file */
  for(;;) {
    ch = fgetc(fp);
    if(ch == EOF) break;
    putchar(ch);
  }
  fclose(fp);

  return 0;
}

listing 4
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  char str[80] = "This is a file system test.\n";
  FILE *fp;
  char ch, *p;

  /* open myfile for output */
  if((fp = fopen("myfile", "w"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* write str to disk */
  p = str;
  while(*p) {
    if(fputc(*p, fp)==EOF) {
      printf("Error writing file.\n");
      exit(1);
    }
    p++ ;
  }
  fclose(fp);

  /* open myfile for input */
  if((fp = fopen("myfile", "r"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* read back the file */
  for(;;) {
    if((ch = fgetc(fp)) == EOF) break;
    putchar(ch);
  }
  fclose(fp);

  return 0;
}

listing 5
if((ch = fgetc(fp)) == EOF) break;

listing 6
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  char str[80] = "This is a file system test.\n";
  FILE *fp;
  char ch, *p;

  /* open myfile for output */
  if((fp = fopen("myfile", "w"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* write str to disk */
  p = str;
  while(*p)
    if(fputc(*p++, fp)==EOF) {
      printf("Error writing file.\n");
      exit(1);
    }

  fclose(fp);

  /* open myfile for input */
  if((fp = fopen("myfile", "r"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* read back the file */
  while((ch = fgetc(fp)) != EOF) putchar(ch);
  fclose(fp);

  return 0;
}

listing 7
/* Search specified file for specified character. */
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
  FILE *fp;
  char ch;

  /* see if correct number of command line arguments */
  if(argc!=3) {
    printf("Usage: find <filename> <ch>\n");
    exit(1);
  }

  /* open file for input */
  if((fp = fopen(argv[1], "r"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* look for character */
  while((ch = fgetc(fp)) != EOF)
    if(ch==*argv[2]) {
      printf("%c found", ch);
      break;
    }
  fclose(fp);

  return 0;
}

listing 8
FILE *fp;
.
.
.
while(!feof(fp)) ch = fgetc(fp);

listing 9
FILE *fp;
.
.
.
while(!feof(fp)) {
  ch = fgetc(fp);
  if(ferror(fp)) {
    printf("File Error\n");
    break;
  }
}

listing 10
/* Copy a file. */
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
  FILE *from, *to;
  char ch;

  /* see if correct number of command line arguments */
  if(argc!=3) {
    printf("Usage: copy <source> <destination>\n");
    exit(1);
  }

  /* open source file */
  if((from = fopen(argv[1], "rb"))==NULL) {
    printf("Cannot open source file.\n");
    exit(1);
  }

  /* open destination file */
  if((to = fopen(argv[2], "wb"))==NULL) {
    printf("Cannot open destination file.\n");
    exit(1);
  }

  /* copy the file */
  while(!feof(from)) {
    ch = fgetc(from);
    if(ferror(from)) {
      printf("Error reading source file.\n");
      exit(1);
    }
    if(!feof(from)) fputc(ch, to);
    if(ferror(to)) {
      printf("Error writing destination file.\n");
      exit(1);
    }
  }

  if(fclose(from)==EOF) {
    printf("Error closing source file.\n");
    exit(1);
  }

  if(fclose(to)==EOF) {
    printf("Error closing destination file.\n");
    exit(1);
  }

  return 0;
}

listing 11
/* Compare files. */
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
  FILE *fp1, *fp2;
  char ch1, ch2, same;
  unsigned long l;

  /* see if correct number of command line arguments */
  if(argc!=3) {
    printf("Usage: compare <file 1> <file 2>\n");
    exit(1);
  }

  /* open first file */
  if((fp1 = fopen(argv[1], "rb"))==NULL) {
    printf("Cannot open first file.\n");
    exit(1);
  }

  /* open second file */
  if((fp2 = fopen(argv [2], "rb"))==NULL) {
    printf("Cannot open second file.\n");
    exit(1);
  }

  l = 0;
  same = 1;
  /* compare the files */
  while(!feof(fp1)) {
    ch1 = fgetc(fp1);
    if(ferror(fp1)) {
      printf("Error reading first file.\n");
      exit(1);
    }
    ch2 = fgetc(fp2);
    if(ferror(fp2)) {
      printf("Error reading second file.\n");
      exit(1);
    }
    if(ch1!=ch2) {
      printf("Files differ at byte number %lu", l);
      same = 0;
      break;
    }
    l++;
  }
  if(same) printf("Files are the same.\n");

  if(fclose(fp1)==EOF) {
    printf("Error closing first file.\n");
    exit(1);
  }

  if(fclose(fp2)==EOF) {
    printf("Error closing second file.\n");
    exit(1);
  }

  return 0;
}

listing 12
#include <stdio.h>
#include <stdlib.h>
#include "string.h"

int main(int argc, char *argv[])
{
  FILE *fp;
  char str[80];

  /* check for command line arg */
  if(argc!=2) {
    printf("Specify file name.\n");
    exit(1);
  }

  /* open file for output */
  if((fp = fopen(argv[1], "w"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  printf("Enter a blank line to stop.\n");
  do {
    printf(": ");
    gets(str);
    strcat(str, "\n"); /* add newline */
    if(*str != '\n') fputs(str, fp);
  } while(*str != '\n');
  fclose(fp);

  /* open file for input */
  if((fp = fopen(argv[1], "r"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* read back the file */
  do {
    fgets(str, 79, fp);
    if(!feof(fp)) printf(str);
  } while(!feof(fp));
  fclose(fp);

  return 0;
}

listing 13
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[])
{
  FILE *fp;
  double ld;
  int d;
  char str[80];

  /* check for command line arg */
  if(argc!=2) {
    printf("Specify file name.\n");
    exit(1);
  }

  /* open file for output */
  if((fp = fopen(argv[1], "w"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  fprintf(fp, "%f %d %s", 12345.342, 1908, "hello");
  fclose(fp);

  /* open file for input */
  if((fp = fopen(argv[1], "r"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  fscanf(fp, "%lf%d%s", &ld, &d, str);
  printf("%f %d %s", ld, d, str);
  fclose(fp);

  return 0;
}

listing 14
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  FILE *fp;
  int i;

  /* open file for output */
  if((fp = fopen("myfile", "wb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  i = 100;

  if(fwrite(&i, 2, 1, fp) != 1) { 
    printf("Write error occurred.\n");
    exit(1);
  }
  fclose(fp);

  /* open file for input */
  if((fp = fopen("myfile", "rb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  if(fread(&i, 2, 1, fp) != 1) {
    printf("Read error occurred.\n");
    exit(1);
  }
  printf("i is %d", i);
  fclose(fp);

  return 0;
}

listing 15
sizeof f
sizeof(float)

listing 16
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  FILE *fp;
  int i;

  /* open file for output */
  if((fp = fopen("myfile", "wb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  i = 100;

  if(fwrite(&i, sizeof(int), 1, fp) != 1) {
    printf("Write error occurred.\n");
    exit(1);
  }
  fclose(fp);

  /* open file for input */
  if((fp = fopen("myfile", "rb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  if(fread(&i, sizeof i, 1, fp) != 1) {
    printf("Read error occurred.\n");
    exit(1);
  }
  printf("i is %d",i);
  fclose(fp);

  return 0;
}

listing 17
#include <stdio.h>
#include <stdlib.h>

double d[10] = {
  10.23, 19.87, 1002.23, 12.9, 0.897,
  11.45, 75.34, 0.0, 1.01, 875.875
};

int main(void)
{
  int i;
  FILE *fp;

  if((fp = fopen("myfile", "wb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  for(i=0; i<10; i++)
    if(fwrite(&d[i], sizeof(double), 1, fp) != 1) {
      printf("Write error.\n");
      exit(1);
    }
  fclose(fp);

  if((fp = fopen("myfile", "rb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* clear the array */
  for(i=0; i<10; i++) d[i] = -1.0;

  for(i=0; i<10; i++)
    if(fread(&d[i], sizeof(double), 1, fp) != 1) {
      printf("Read error.\n");
      exit(1);
    }
  fclose(fp);

  /* display the array */
  for(i=0; i<10; i++) printf("%f ", d[i]);

  return 0;
}

listing 18
#include <stdio.h>
#include <stdlib.h>

double d[10] = {
  10.23, 19.87, 1002.23, 12.9, 0.897,
  11.45, 75.34, 0.0, 1.01, 875.875
};

int main(void)
{
  int i;
  FILE *fp;

  if((fp = fopen("myfile", "wb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* write the entire array in one step */
  if(fwrite(d, sizeof d, 1, fp) != 1) {
    printf("Write error.\n");
    exit(1);
  }
  fclose(fp);

  if((fp = fopen("myfile", "rb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* clear the array */
  for(i=0; i<10; i++) d[i] = -1.0;

  /* read the entire array in one step */
  if(fread(d, sizeof d, 1, fp) != 1) {
    printf("Read error.\n");
    exit(1);
  }
  fclose(fp);

  /* display the array */
  for(i=0; i<10; i++) printf("%f ", d[i]);

  return 0;
}

listing 19
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
  long loc;
  FILE *fp;

  /* see if filename is specified */
  if(argc!=2) {
    printf("File name missing.\n");
    exit(1);
  }

  if((fp = fopen(argv[1] , "rb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  printf("Enter byte to seek to: ");
  scanf("%ld", &loc);
  if(fseek(fp, loc, SEEK_SET)) {
    printf("Seek error.\n");
    exit(1);
  }

  printf("Value at loc %ld is %d", loc, getc(fp));
  fclose(fp);

  return 0;
}

listing 20
/* Copy a file in reverse order */
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
  long loc;
  FILE *in, *out;
  char ch;

  /* see if correct number of command line arguments */
  if(argc!=3) {
    printf("Usage: revcopy <source> <destination>.\n");
    exit(1);
  }

  if((in = fopen(argv[1], "rb"))==NULL) {
    printf("Cannot open input file.\n");
    exit(1);
  }
  if((out = fopen(argv[2], "wb"))==NULL) {
    printf("Cannot open output file.\n");
    exit(1);
  }

  /* find end of source file */
  fseek(in, 0L, SEEK_END);
  loc = ftell(in);

  /* copy file in reverse order */
  loc = loc-1; /* back up past end-of-file mark */
  while(loc >= 0L) {
    fseek(in, loc, SEEK_SET);
    ch = fgetc(in);
    fputc(ch, out);
    loc--;
  }
  fclose(in);
  fclose(out);

  return 0;
}

listing 21
#include <stdio.h>
#include <stdlib.h>

double d[10] = {
  10.23, 19.87, 1002.23, 12.9, 0.897,
  11.45, 75.34, 0.0, 1.01, 875.875
};

int main(void)
{
  long loc;
  double value;
  FILE *fp;

  if((fp = fopen("myfile", "wb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* write the entire array in one step */
  if(fwrite(d, sizeof d, 1, fp) != 1) {
    printf("Write error.\n");
    exit(1);
  }
  fclose(fp);

  if((fp = fopen("myfile", "rb"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  printf("Which element? ");
  scanf("%ld", &loc);
  if(fseek(fp, loc*sizeof(double), SEEK_SET)) {
    printf("Seek error.\n");
    exit(1);
  }

  fread(&value, sizeof(double), 1, fp);
  printf("Element %ld is %f", loc, value);

  fclose(fp);

  return 0;
}

listing 22
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main(void)
{
  char fname[80];

  printf("Enter name of file to erase: ");
  gets(fname);
  printf("Are you sure? (Y/N) ");
  if(toupper(getchar())=='Y') remove(fname);

  return 0;
}

listing 23
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
  FILE *fp;

  /* see if filename is specified */
  if(argc!=2) {
    printf("File name missing.\n");
    exit(1);
  }

  if((fp = fopen(argv[1], "r"))==NULL) {
    printf("Cannot open file.\n");
    exit(1);
  }

  /* show it once */
  while(!feof(fp))
    putchar(getc(fp));

  rewind(fp);

  /* show it twice */
  while(!feof(fp))
    putchar(getc(fp));

  fclose(fp);

  return 0;
}

listing 24
FILE *fp;
.
.
.
fflush(fp);

listing 25
#include <stdio.h>

int main(void)
{
  if(rename("myfile.txt", "yourfile.txt")) 
    printf("Rename failed.\n");
  else
    printf("Rename successful.\n");

  return 0;
}

listing 26
fprintf(stdout, "%d %c %s", 100, 'c', "this is a string");
printf("%d %c %s", 100, 'c', "this is a string");

listing 27
#include <stdio.h>

int main(void)
{
  printf("This is an example of redirection.\n");

  return 0;
}

listing 28
#include <stdio.h>

int main(void)
{
  int i;

  scanf("%d", &i);
  printf("%d", i);

  return 0;
}

listing 29
#include <stdio.h>
#include <string.h>

int main(void)
{
  char str[10];
  int i;

  printf("Enter a string: ");
  fgets(str, 10, stdin);

  /* remove newline, if present */
  i = strlen(str)-1;
  if(str[i]=='\n') str[i] = '\0';

  printf("This is your string: %s", str);

  return 0;
}

